# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [self-hosted]
        build_type: [RelWithDebInfo, Debug]
        c_compiler: [clang/clang15-spirv-omp, clang/clang16-spirv-omp]
        # chip_backend: [opencl/cpu, opencl/dgpu, opencl/pocl, level-zero/dgpu]

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        source /opt/intel/oneapi/setvars.sh &> /dev/null;
        source /etc/profile.d/modules.sh &> /dev/null;
        export MODULEPATH=:/home/pvelesko/modulefiles:/opt/intel/oneapi/modulefiles
        module load ${{ matrix.c_compiler }} opencl/cpu;
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: >
      module list
      cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: >
        source /etc/profile.d/modules.sh &> /dev/null;
        module avail;
        module load ${{ matrix.c_compiler }} opencl/cpu;
        ctest --build-config ${{ matrix.build_type }} -R "hip_sycl_interop_no_buffers" --output-on-failure
